# -*- coding: utf-8 -*-
"""Copy of CS110_Project8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WU0eXMehOM9X3UB7BLmmglggnPEUGDte

# **NOTE:** Use File > Save a copy in Drive to make a copy before doing anything else

# Project 8: Student Habits vs Academic Performance Analysis

#### Overview

This project analyzes the relationship between student lifestyle habits and academic performance using a comprehensive dataset from Kaggle. The dataset contains information about 1,000 students and includes 16 variables covering various aspects of student life, including study habits, social media usage, sleep patterns, diet quality, exercise frequency, and academic outcomes.

The analysis focuses on understanding how different study patterns correlate with exam performance.The project demonstrates fundamental data analysis skills including data cleaning, statistical calculations, and comparative analysis using Python and pandas.
"""

# Install dependencies as needed:
# pip install kagglehub[pandas-datasets]
import kagglehub
from kagglehub import KaggleDatasetAdapter

# Set the path to the file you'd like to load
# Update file_path to point to the specific file within the dataset
file_path = "student_habits_performance.csv"

# Load the latest version
df = kagglehub.load_dataset(
  KaggleDatasetAdapter.PANDAS,
  "jayaantanaath/student-habits-vs-academic-performance",
  file_path,
  # Provide any additional arguments like
  # sql_query or pandas_kwargs. See the
  # documenation for more information:
  # https://github.com/Kaggle/kagglehub/blob/main/README.md#kaggledatasetadapterpandas
)

print("First 5 records:", df.head())

one_col = df['age']

type(one_col)

df.info()

df.shape

df.columns

"""### clean the data"""

df.isnull().sum()

"""This checks how many missing (NaN) values are in each column of the DataFrame. Based on the output:

All columns have 0 missing values except for parental_education_level, which has 91 missing values.

The dataset is mostly clean, but you do need to clean or handle the missing data in the parental_education_level column.

#### Fill with a default or common value

#### drop rows with missing values
"""

df.dropna(subset=['parental_education_level'], inplace=True)

# checking the data again
df.isnull().sum()

"""### Questions to Answer

Please find the answer for the following questoins.

1. Find the average study hours per day for all students. Please create a code cell below this to answer the question.(0.5 point)

2. Identify the student who studies MOST hours per day. Please create a code cell below to answer the question.(0.5 point)

3. Count how many students study more than 6 hours per day. Please create a code cell below this to answer the question.(0.5 point)

4. What is the percentage of students who study more than 6 hours per day. Please create a code cell below this to answer the question.(0.5 point)

5. Calculate what percentage of students study less than 2 hours per day. Please create a code cell below this to answer the question.(0.5 point)

6. Do students who study more than 5 hours per day have higher exam scores on average? Please create a code cell below to answer this question. (0.5 point)

7. Use "Explain code" for the code you produced for Question 6 and summarize in your own words to show that you understood the code Gemini produced. Please create a text cell below to answer this question. (0.5 point)

8. The codes produced to answer the questions use "vectorization"? Please justify your answer with an example. Please create a text cell below to answer this question. (0.5 point)

Count how many students study more than 6 hours per day. Please create a code cell below this to answer the question.(0.5 point)
"""

df['study_hours_per_day']

df['study_hours_per_day'] > 6

# prompt: Count how many students study more than 6 hours per day.

(df['study_hours_per_day'] > 6).sum()

# prompt: Calculate what percentage of students study less than 2 hours per day.

# Filter students who study less than 2 hours per day
students_less_than_2_hours = df[df['study_hours_per_day'] < 2]

# Count the number of students who study less than 2 hours per day
num_students_less_than_2_hours = len(students_less_than_2_hours)

# Get the total number of students
total_students = len(df)

# Calculate the percentage
percentage_less_than_2_hours = (num_students_less_than_2_hours / total_students) * 100

print(f"Percentage of students who study less than 2 hours per day: {percentage_less_than_2_hours:.2f}%")

df['study_hours_per_day'] < 2

(df['study_hours_per_day'] < 2).sum()

# prompt: Do students who study more than 5 hours per day have higher exam scores on average?

# Separate students into two groups: those who study more than 5 hours and those who don't
students_more_than_5_hours = df[df['study_hours_per_day'] > 5]
students_5_hours_or_less = df[df['study_hours_per_day'] <= 5]

# Calculate the average exam score for each group
average_score_more_than_5_hours = students_more_than_5_hours['exam_score'].mean()
average_score_5_hours_or_less = students_5_hours_or_less['exam_score'].mean()

print(f"Average exam score for students studying more than 5 hours per day: {average_score_more_than_5_hours:.2f}")
print(f"Average exam score for students studying 5 hours or less per day: {average_score_5_hours_or_less:.2f}")

# Compare the averages and print the conclusion
if average_score_more_than_5_hours > average_score_5_hours_or_less:
    print("Students who study more than 5 hours per day have higher exam scores on average.")
else:
    print("Students who study more than 5 hours per day do not have higher exam scores on average.")